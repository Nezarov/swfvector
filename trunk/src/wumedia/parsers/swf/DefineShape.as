/* * Copyright 2009 (c) Guojian Miguel Wu, guojian@wu-media.com. * * Permission is hereby granted, free of charge, to any person * obtaining a copy of this software and associated documentation * files (the "Software"), to deal in the Software without * restriction, including without limitation the rights to use, * copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the * Software is furnished to do so, subject to the following * conditions: * * The above copyright notice and this permission notice shall be * included in all copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR * OTHER DEALINGS IN THE SOFTWARE. */package wumedia.parsers.swf {	import flash.geom.Rectangle;	
	
	/**	 * @author guojianwu	 */	public class DefineShape {		public function DefineShape(tag:Tag) {			var data:Data = tag.data;			_id = data.readUnsignedShort();			_bounds = data.readRect();			if ( tag.type == TagTypes.DEFINE_SHAPE4 ) {				_edgeBounds = data.readRect();				// TODO: what do we do with these values?				data.readUBits(5); // reversed - must be 0;				data.readUBits(1); // UsesFillWindingRule if 1 (swf 10)				data.readUBits(1); // UsesNonScalingStrokes				data.readUBits(1); // UsesScalingStrokes			} else {				_edgeBounds = _bounds;			}			_shapes = new ShapeRecord(data, tag.type);		}		private var _id			:uint;		private var _bounds		:Rectangle;		private var _edgeBounds	:Rectangle;		private var _shapes		:ShapeRecord;				public function get id():uint {	return _id; 	}		public function get bounds():Rectangle { return _bounds;	}		public function get shapes():ShapeRecord { return _shapes; }	}}