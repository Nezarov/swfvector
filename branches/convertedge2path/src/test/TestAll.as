package test {	import wumedia.vector.VectorShapes;	import wumedia.vector.VectorText;		import org.papervision3d.cameras.CameraType;	import org.papervision3d.materials.special.VectorShapeMaterial;	import org.papervision3d.objects.DisplayObject3D;	import org.papervision3d.objects.special.VectorShape3D;	import org.papervision3d.view.BasicView;		import flash.display.GradientType;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.geom.Matrix;	import flash.net.URLLoader;	import flash.net.URLLoaderDataFormat;	import flash.net.URLRequest;	import flash.text.Font;			/**	 * @author guojian@wu-media.com	 */	public class TestAll extends BasicView {		public function TestAll() {			super(0, 0, true, false, CameraType.FREE);			init();		}		private var _center	:DisplayObject3D;		private var _loader	:URLLoader;				private function init():void {			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;			Font.registerFont(Font0);			_center = new DisplayObject3D();			scene.addChild(_center);						// extract font data from swf			VectorText.extractFont(root.loaderInfo.bytes);			// draw loading text			graphics.beginFill(0x0000);			VectorText.write(graphics, "_Arial", 16, 16, 0, "Loading...", 10, 10);						// load vector asets in a swf			// alternatively you can embed in the same swf insted of loading it.			_loader = new URLLoader();			_loader.dataFormat = URLLoaderDataFormat.BINARY;			_loader.addEventListener(Event.COMPLETE, onLoaded);			_loader.load(new URLRequest("vectorassets.swf"));					}				private function onLoaded(e:Event):void {			// extract a couple of vector shapes using the prefered METHOD_CONTINUOUS_POINTS			// METHOD_CONTINUOUS_POINTS is faster than METHOD_REGULAR both in parsing and rendering			VectorShapes.extractFromLibrary(_loader.data, ["woman", "snowman"], VectorShapes.METHOD_CONTINUOUS_POINTS);			// extract a vector shape using the slower METHOD_REGULAR			// we have to use METHOD_REGULAR, because all the vector data has been flatten and			// will not render well with METHOD_CONTINUOUS_POINTS			VectorShapes.extractFromLibrary(_loader.data, ["circles"],VectorShapes.METHOD_REGULAR);						// write text in 2D to the graphics of a DisplayObject			var m:Matrix = new Matrix();			m.createGradientBox(200, 100, 0.03);			graphics.clear();			graphics.beginGradientFill(GradientType.LINEAR, [0xff4400, 0x0000ff, 0xff4400], [1, 1, 1], [0x00, 0x77, 0xff], m);			VectorText.write(graphics, "_Arial", 20, 20, 0, "Vector text in 2D\nusing flash drawing API", 10, 10);						// write text in 3D			var shape3:VectorShape3D = new VectorShape3D(new VectorShapeMaterial());			shape3.z = 200;			shape3.graphics.beginFill(0x333333);			VectorText.write(shape3.graphics, "_Arial", 100, 100, 0, "Vectors in 3D\nalpha version", 0.0, 0.0, Number.POSITIVE_INFINITY, VectorText.CENTER);			_center.addChild(shape3);									// Draw a vector in 3D			var shape0:VectorShape3D = new VectorShape3D(new VectorShapeMaterial());			shape0.z = -200;			VectorShapes.draw(shape0.graphics, "snowman", 2.0);			_center.addChild(shape0);						var shape1:VectorShape3D = new VectorShape3D(new VectorShapeMaterial());			shape1.rotationY = 90;			shape1.x = 200;			VectorShapes.draw(shape1.graphics, "circles");			_center.addChild(shape1);						var shape2:VectorShape3D = new VectorShape3D(new VectorShapeMaterial());			shape2.rotationY = 90;			shape2.x = -200;			VectorShapes.draw(shape2.graphics, "woman");			_center.addChild(shape2);									startRendering();		}		override protected function onRenderTick(e:Event=null):void {			_center.rotationY += 2;			_center.rotationX += 1;			super.onRenderTick(e);		}	}}